{"version":3,"sources":["components/Meteorites.js","components/Gmap.js","containers/MeteoritesContainer.js","containers/Main.js","configs/configs.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Meteorites","props","meteoritesComponent","meteorites","map","meteorite","idx","Card","key","id","Body","Title","name","Text","mass","recclass","Fragment","Marker","text","style","color","icon","faMapMarkerAlt","fontWeight","Gmap","useState","center","lat","lng","zoom","defaultProps","markerComponent","setMarkerComponent","useEffect","meteoritesInfo","forEach","geolocation","push","coordinates","marker","height","width","bootstrapURLKeys","defaultCenter","defaultZoom","containerStyle","margin","MeteoritesContainer","setMeteorites","filteredMeteorites","filter","Button","variant","onClick","prevMeteorites","sort","a","b","parseInt","Main","selectedFilter","setSelectedFilter","filterValue","setFilterValue","type","placeholder","inputHint","setInputHint","show","msg","error","setError","Container","Row","Col","xs","Form","Group","Label","Control","as","value","onChange","e","target","axios","get","then","res","data","catch","err","console","log","response","length","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0dfcda1f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Card} from 'react-bootstrap';\r\n\r\nconst Meteorites = (props) => {\r\n\r\n    let meteoritesComponent = props.meteorites.map((meteorite, idx) => {\r\n        return (\r\n            <Card key={meteorite.id}>\r\n                <Card.Body>\r\n                    <Card.Title>{meteorite.name}</Card.Title>\r\n                    <Card.Text>\r\n                        Mass: {meteorite.mass} <br/>\r\n                        Recclass: {meteorite.recclass}\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {meteoritesComponent}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Meteorites;","import React, { useState, useEffect } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Marker = ({text}) => {\r\n    return (\r\n        <div style={{color: 'red'}}>\r\n            <FontAwesomeIcon icon={faMapMarkerAlt} />\r\n            <span style={{fontWeight: 600}}>&nbsp;{text}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Gmap = (props) => {\r\n\r\n    // google map default setting\r\n    const [defaultProps, setDefaultProps] = useState({\r\n        key: {\r\n            key:\"AIzaSyDQ9x7t1C1UCD0oZ-gi7I9GEQ1hED5P0Ck\"\r\n        },\r\n        center: {\r\n            lat: 0,\r\n            lng: 0\r\n        },\r\n        zoom: 1\r\n    });\r\n\r\n    const [markerComponent, setMarkerComponent] = useState(null);\r\n\r\n    useEffect(() => {\r\n        let meteoritesInfo = []\r\n        props.meteorites.forEach((meteorite) => {\r\n            if (meteorite.geolocation) {\r\n                meteoritesInfo.push({\r\n                    text: meteorite.name,\r\n                    lat: meteorite.geolocation.coordinates[0],\r\n                    lng: meteorite.geolocation.coordinates[1]\r\n                });\r\n            }\r\n        });\r\n\r\n        let markerComponent = meteoritesInfo.map((marker, idx) => {\r\n            return (\r\n                <Marker key={marker.text} lat={marker.lat} lng={marker.lng} text={marker.text} />\r\n            )\r\n        })\r\n\r\n        setMarkerComponent(markerComponent);\r\n    }, [props.meteorites]);\r\n\r\n    return (\r\n      // Important! Always set the container height explicitly\r\n      <div style={{ height: '100vh', width: '100%' }}>\r\n        <GoogleMapReact\r\n          bootstrapURLKeys={defaultProps.key}\r\n          defaultCenter={defaultProps.center}\r\n          defaultZoom={defaultProps.zoom}\r\n        >\r\n          {markerComponent}\r\n        </GoogleMapReact>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Gmap;","import React, {useState, useEffect} from 'react';\r\nimport Meteorites from '../components/Meteorites';\r\nimport {Button} from 'react-bootstrap'\r\nimport Gmap from '../components/Gmap';\r\n\r\nconst containerStyle = {\r\n    margin: \"10px\"\r\n}\r\n\r\nconst MeteoritesContainer = (props) => {\r\n\r\n    const [meteorites, setMeteorites] = useState(props.meteorites);\r\n\r\n    useEffect(() => {\r\n        let filteredMeteorites = props.meteorites.filter((meteorite) => {\r\n            // display nothing when there is no mass or recclass\r\n            if (!meteorite.mass || !meteorite.recclass) {\r\n                return false;\r\n            }\r\n            return true;\r\n        })\r\n        setMeteorites(filteredMeteorites);\r\n    }, [props.meteorites]);\r\n    \r\n    const sortByMass = () => {\r\n        setMeteorites(prevMeteorites => {\r\n            return [...prevMeteorites].sort((a,b) => {\r\n                let aMass = parseInt(a.mass);\r\n                let bMass = parseInt(b.mass);\r\n                if (aMass > bMass) {\r\n                    return 1;\r\n                } else {\r\n                    return -1;\r\n                }\r\n            })\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <div style={containerStyle}>\r\n            <Gmap  meteorites={meteorites}/>\r\n            <Button variant=\"success\" onClick={sortByMass} style={{margin:\"10px\"}}>Sort By mass</Button>\r\n            <Meteorites meteorites={meteorites}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MeteoritesContainer;","import React, {useState, useEffect} from 'react';\r\nimport {Container, Row, Col, Form, Button} from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport * as configs from '../configs/configs';\r\nimport MeteoritesContainer from './MeteoritesContainer';\r\n\r\nconst Main = (props) => {\r\n    const [selectedFilter, setSelectedFilter] = useState('year');\r\n    const [filterValue, setFilterValue] = useState('');\r\n    const [inputHint, setInputHint] = useState({\r\n        type: \"number\",\r\n        placeholder: \"e.g. 2002\"\r\n    });\r\n    const [error, setError] = useState({show:false, msg:''});\r\n    const [meteorites, setMeteorites] = useState([]);\r\n\r\n    /* change the input type and placeholder of the filter value input */\r\n    useEffect(() => {\r\n        if (selectedFilter === 'year') {\r\n            setInputHint({\r\n                type: \"number\",\r\n                placeholder: \"e.g. 2002\"\r\n            });\r\n        }\r\n\r\n        if (selectedFilter === 'recclass') {\r\n            setInputHint({\r\n                type: \"text\",\r\n                placeholder: \"e.g. LL6\"\r\n            });\r\n        }\r\n    }, [selectedFilter]);\r\n\r\n    const requestData = () => {\r\n        if (!filterValue) {\r\n            setError({\r\n                show:true,\r\n                msg:\"Please enter a value\"\r\n            });\r\n            return;\r\n        }\r\n\r\n        axios.get(`${configs.URL_NODE_SERVER}/meteorites/?${selectedFilter}=${filterValue}`)\r\n        .then((res) => {\r\n            setMeteorites(res.data.meteorites);\r\n        })\r\n        .catch((err) => {\r\n            console.log(err.response);\r\n            setError({\r\n                show:true,\r\n                msg:\"Sorry something went wrong with our server.\"\r\n            })\r\n        });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Container>\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <h1>Meteorites</h1>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <p>You can display meteorites either by year or recclass. Please choose the filter type and type in the value.</p>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <Form>\r\n                            <Form.Group>\r\n                                <Form.Label>Select Filter Type</Form.Label>\r\n                                <Form.Control as=\"select\"\r\n                                    value={selectedFilter}\r\n                                    onChange={(e) => {setSelectedFilter(e.target.value)}}>\r\n                                    <option value=\"year\">year</option>\r\n                                    <option value=\"recclass\">recclass</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Label>Enter {selectedFilter}</Form.Label>\r\n                                <Form.Control type={inputHint.type} placeholder={inputHint.placeholder}\r\n                                    onChange={(e) => {setFilterValue(e.target.value)}} />\r\n                            </Form.Group>\r\n                        </Form>\r\n                        {error.show ? <div>{error.msg}</div> : null}\r\n                        <Button type=\"primary\" onClick={requestData}>Get meteorites</Button>\r\n                        {meteorites.length !== 0 ? \r\n                            <MeteoritesContainer meteorites={meteorites} />\r\n                            : null\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Main;","export const URL_NODE_SERVER = \"http://localhost:8080\"","import React from 'react';\nimport Main from './containers/Main';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}